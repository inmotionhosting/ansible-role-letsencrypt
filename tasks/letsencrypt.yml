---
- name: Install Certbot.
  ansible.builtin.package:
    name: "{{ certbot_package }}"
    state: present

- name: Check if certificate already exists.
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ site_domain }}/cert.pem"
  register: letsencrypt_cert
  when:
    - site_domain is defined
    - site_domain | length > 0
  tags: always

- name: Ensure pre and post hook folders exist.
  ansible.builtin.file:
    path: /etc/letsencrypt/renewal-hooks/{{ item }}
    state: directory
    mode: "0755"
    owner: root
    group: root
  with_items:
    - pre
    - post

- name: Create pre hook to stop services.
  ansible.builtin.template:
    src: etc/letsencrypt/renewal-hooks/pre/stop_services.j2
    dest: /etc/letsencrypt/renewal-hooks/pre/stop_services
    owner: root
    group: root
    mode: "0750"
  when:
    - certbot_stop_services is defined
    - certbot_stop_services

- name: Create post hook to start services.
  ansible.builtin.template:
    src: etc/letsencrypt/renewal-hooks/post/start_services.j2
    dest: /etc/letsencrypt/renewal-hooks/post/start_services
    owner: root
    group: root
    mode: "0750"
  when:
    - certbot_stop_services is defined
    - certbot_stop_services

- name: Generate Self-signed Certificate if no certificate exists
  when:
    - not letsencrypt_cert.stat.exists
  block:
    - name: Ensure directory exists for local self-signed TLS certs.
      ansible.builtin.file:
        path: /etc/letsencrypt/live/{{ site_domain }}
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Generate an OpenSSL private key.
      community.crypto.openssl_privatekey:
        path: /etc/letsencrypt/live/{{ site_domain }}/privkey.pem

    - name: Generate an OpenSSL CSR.
      community.crypto.openssl_csr:
        path: /etc/pki/tls/private/{{ site_domain }}.csr
        privatekey_path: /etc/letsencrypt/live/{{ site_domain }}/privkey.pem
        common_name: "{{ site_domain }}"

    - name: Generate a Self Signed OpenSSL certificate.
      community.crypto.x509_certificate:
        path: /etc/letsencrypt/live/{{ site_domain }}/cert.pem
        privatekey_path: /etc/letsencrypt/live/{{ site_domain }}/privkey.pem
        csr_path: /etc/pki/tls/private/{{ site_domain }}.csr
        provider: selfsigned

- name: Get certificate information
  community.crypto.x509_certificate_info:
    path: "/etc/letsencrypt/live/{{ site_domain }}/cert.pem"
  register: cert_info

- name: Check if cert is self-signed
  ansible.builtin.set_fact:
    is_self_signed: "{{ cert_info.issuer.commonName == cert_info.subject.commonName }}"

- name: Issue certificate
  tags: always
  block:
    - name: Generate new certificate if one doesn't exist.
      ansible.builtin.command: "{{ certbot_create_command }}"
      when:
        - is_self_signed
        - site_domain is defined
        - site_domain | length > 0
      changed_when: false
      register: certbot_result
  rescue:
    - name: Display debug statement
      ansible.builtin.debug:
        msg: Unable to issue Let's Encrypt certificate

    - name: Update is_self_signed fact to be false if certbot succeeds
      ansible.builtin.set_fact:
        is_self_signed: false
      when: certbot_result.rc == 0

- name: Generate DH Parameters
  community.crypto.openssl_dhparam:
    path: "{{ dh_path }}"
    size: "{{ cipher_size }}"

- name: Creates a cron to renew letsencrypt certificates
  ansible.builtin.cron:
    name: letsencrypt cert renewal
    weekday: "0"
    minute: "0"
    hour: "1"
    user: root
    job: >-
      certbot renew
      --pre-hook /etc/letsencrypt/renewal-hooks/pre/stop_services
      --post-hook /etc/letsencrypt/renewal-hooks/post/start_services
    cron_file: certbot
